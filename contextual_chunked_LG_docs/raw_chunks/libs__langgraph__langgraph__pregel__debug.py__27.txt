"""Produce "task_result" events for stream_mode=debug."""
def map_debug_task_results(
    step: int,
    task_tup: tuple[PregelExecutableTask, Sequence[tuple[str, Any]]],
    stream_keys: Union[str, Sequence[str]],
) -> Iterator[DebugOutputTaskResult]:

    stream_channels_list = (
        [stream_keys] if isinstance(stream_keys, str) else stream_keys
    )
    task, writes = task_tup
    yield {
        "type": "task_result",
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "step": step,
        "payload": {
            "id": task.id,
            "name": task.name,
            "error": next((w[1] for w in writes if w[0] == ERROR), None),
            "result": [
                w for w in writes if w[0] in stream_channels_list or w[0] == RETURN
            ],
            "interrupts": [
                asdict(v)
                for w in writes
                if w[0] == INTERRUPT
                for v in (w[1] if isinstance(w[1], Sequence) else [w[1]])
            ],
        },
    }