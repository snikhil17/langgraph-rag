"""Get Pydantic state update as a list of (key, value) tuples."""
def get_update_as_tuples(input: Any, keys: Sequence[str]) -> list[tuple[str, Any]]:

    # Pydantic v1
    if isinstance(input, BaseModelV1):
        keep: Optional[set[str]] = input.__fields_set__
        defaults = {k: v.default for k, v in input.__fields__.items()}
    # Pydantic v2
    elif isinstance(input, BaseModel):
        keep = input.model_fields_set
        defaults = {k: v.default for k, v in input.model_fields.items()}
    else:
        keep = None
        defaults = {}

    # NOTE: This behavior for Pydantic is somewhat inelegant,
    # but we keep around for backwards compatibility
    # if input is a Pydantic model, only update values
    # that are different from the default values or in the keep set
    return [
        (k, value)
        for k in keys
        if (value := getattr(input, k, MISSING)) is not MISSING
        and (
            value is not None
            or defaults.get(k, MISSING) is not None
            or (keep is not None and k in keep)
        )
    ]