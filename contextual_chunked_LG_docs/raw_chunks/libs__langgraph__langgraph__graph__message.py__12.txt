"""A StateGraph where every node receives a list of messages as input and returns one or more messages as output.

MessageGraph is a subclass of StateGraph whose entire state is a single, append-only* list of messages.
Each node in a MessageGraph takes a list of messages as input and returns zero or more
messages as output. The `add_messages` function is used to merge the output messages from each node
into the existing list of messages in the graph's state.

Examples:
    ```pycon
    >>> from langgraph.graph.message import MessageGraph
    ...
    >>> builder = MessageGraph()
    >>> builder.add_node("chatbot", lambda state: [("assistant", "Hello!")])
    >>> builder.set_entry_point("chatbot")
    >>> builder.set_finish_point("chatbot")
    >>> builder.compile().invoke([("user", "Hi there.")])
    [HumanMessage(content="Hi there.", id='...'), AIMessage(content="Hello!", id='...')]
    ```

    ```pycon
    >>> from langchain_core.messages import AIMessage, HumanMessage, ToolMessage
    >>> from langgraph.graph.message import MessageGraph
    ...
    >>> builder = MessageGraph()
    >>> builder.add_node(
    ...     "chatbot",
    ...     lambda state: [
    ...         AIMessage(
    ...             content="Hello!",
    ...             tool_calls=[{"name": "search", "id": "123", "args": {"query": "X"}}],
    ...         )
    ...     ],
    ... )
    >>> builder.add_node(
    ...     "search", lambda state: [ToolMessage(content="Searching...", tool_call_id="123")]
    ... )
    >>> builder.set_entry_point("chatbot")
    >>> builder.add_edge("chatbot", "search")
    >>> builder.set_finish_point("search")
    >>> builder.compile().invoke([HumanMessage(content="Hi there. Can you search for X?")])
    {'messages': [HumanMessage(content="Hi there. Can you search for X?", id='b8b7d8f4-7f4d-4f4d-9c1d-f8b8d8f4d9c1'),
                 AIMessage(content="Hello!", id='f4d9c1d8-8d8f-4d9c-b8b7-d8f4f4d9c1d8'),
                 ToolMessage(content="Searching...", id='d8f4f4d9-c1d8-4f4d-b8b7-d8f4f4d9c1d8', tool_call_id="123")]}
    ```"""
class MessageGraph(StateGraph):
    """A StateGraph where every node receives a list of messages as input and returns one or more messages as output.

    MessageGraph is a subclass of StateGraph whose entire state is a single, append-only* list of messages.
    Each node in a MessageGraph takes a list of messages as input and returns zero or more
    messages as output. The `add_messages` function is used to merge the output messages from each node
    into the existing list of messages in the graph's state.

    Examples:
        ```pycon
        >>> from langgraph.graph.message import MessageGraph
        ...
        >>> builder = MessageGraph()
        >>> builder.add_node("chatbot", lambda state: [("assistant", "Hello!")])
        >>> builder.set_entry_point("chatbot")
        >>> builder.set_finish_point("chatbot")
        >>> builder.compile().invoke([("user", "Hi there.")])
        [HumanMessage(content="Hi there.", id='...'), AIMessage(content="Hello!", id='...')]
        ```

        ```pycon
        >>> from langchain_core.messages import AIMessage, HumanMessage, ToolMessage
        >>> from langgraph.graph.message import MessageGraph
        ...
        >>> builder = MessageGraph()
        >>> builder.add_node(
        ...     "chatbot",
        ...     lambda state: [
        ...         AIMessage(
        ...             content="Hello!",
        ...             tool_calls=[{"name": "search", "id": "123", "args": {"query": "X"}}],
        ...         )
        ...     ],
        ... )
        >>> builder.add_node(
        ...     "search", lambda state: [ToolMessage(content="Searching...", tool_call_id="123")]
        ... )
        >>> builder.set_entry_point("chatbot")
        >>> builder.add_edge("chatbot", "search")
        >>> builder.set_finish_point("search")
        >>> builder.compile().invoke([HumanMessage(content="Hi there. Can you search for X?")])
        {'messages': [HumanMessage(content="Hi there. Can you search for X?", id='b8b7d8f4-7f4d-4f4d-9c1d-f8b8d8f4d9c1'),
                     AIMessage(content="Hello!", id='f4d9c1d8-8d8f-4d9c-b8b7-d8f4f4d9c1d8'),
                     ToolMessage(content="Searching...", id='d8f4f4d9-c1d8-4f4d-b8b7-d8f4f4d9c1d8', tool_call_id="123")]}
        ```
    """

    def __init__(self) -> None:
        super().__init__(Annotated[list[AnyMessage], add_messages])  # type: ignore[arg-type]