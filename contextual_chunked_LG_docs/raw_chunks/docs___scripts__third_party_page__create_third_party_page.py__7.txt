"""Generate the markdown content for the third party page.

Args:
    resolved_packages: A list of resolved package information.
    language: str

Returns:
    The markdown content as a string."""
def generate_markdown(resolved_packages: List[ResolvedPackage], language: str) -> str:
    """Generate the markdown content for the third party page.

    Args:
        resolved_packages: A list of resolved package information.
        language: str

    Returns:
        The markdown content as a string.
    """
    # Update the URL to the actual file once the initial version is merged
    if language == "python":
        langgraph_url = (
            "https://github.com/langchain-ai/langgraph/blob/main/docs"
            "/_scripts/third_party_page/packages.yml"
        )
    elif language == "js":
        langgraph_url = (
            "https://github.com/langchain-ai/langgraphjs/blob/main/docs"
            "/_scripts/third_party/packages.yml"
        )
    else:
        raise ValueError(f"Invalid language '{language}'. Expected 'python' or 'js'.")

    sorted_packages = sorted(
        resolved_packages, key=lambda p: p["weekly_downloads"] or 0, reverse=True
    )
    rows = [
        "| Name | GitHub URL | Description | Weekly Downloads | Stars |",
        "| --- | --- | --- | --- | --- |",
    ]
    for package in sorted_packages:
        name = f"**{package['name']}**"
        repo_url = f"[{package['repo']}](https://github.com/{package['repo']})"
        stars_badge = (
            f"https://img.shields.io/github/stars/{package['repo']}?style=social"
        )
        stars = f"![GitHub stars]({stars_badge})"
        downloads = package["weekly_downloads"] or "-"
        row = f"| {name} | {repo_url} | {package['description']} | {downloads} | {stars}"
        rows.append(row)
    markdown_content = MARKDOWN.format(
        library_list="\n".join(rows), langgraph_url=langgraph_url
    )
    return markdown_content