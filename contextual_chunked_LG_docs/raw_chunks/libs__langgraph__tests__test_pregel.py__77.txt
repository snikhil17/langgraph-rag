def test_imp_task(
    request: pytest.FixtureRequest, checkpointer_name: str, checkpoint_during: bool
) -> None:
    if not checkpoint_during and "shallow" in checkpointer_name:
        pytest.skip("Checkpointing during execution not supported")

    checkpointer = request.getfixturevalue(f"checkpointer_{checkpointer_name}")
    mapper_calls = 0

    class Configurable:
        model: str

    @task()
    def mapper(input: int) -> str:
        nonlocal mapper_calls
        mapper_calls += 1
        time.sleep(input / 100)
        return str(input) * 2

    @entrypoint(checkpointer=checkpointer, config_schema=Configurable)
    def graph(input: list[int]) -> list[str]:
        futures = [mapper(i) for i in input]
        mapped = [f.result() for f in futures]
        answer = interrupt("question")
        return [m + answer for m in mapped]

    assert graph.get_input_jsonschema() == {
        "type": "array",
        "items": {"type": "integer"},
        "title": "LangGraphInput",
    }
    assert graph.get_output_jsonschema() == {
        "type": "array",
        "items": {"type": "string"},
        "title": "LangGraphOutput",
    }
    assert graph.get_config_jsonschema() == {
        "$defs": {
            "Configurable": {
                "properties": {
                    "model": {"default": None, "title": "Model", "type": "string"},
                    "checkpoint_id": {
                        "anyOf": [{"type": "string"}, {"type": "null"}],
                        "default": None,
                        "description": "Pass to fetch a past checkpoint. If None, fetches the latest checkpoint.",
                        "title": "Checkpoint ID",
                    },
                    "checkpoint_ns": {
                        "default": "",
                        "description": 'Checkpoint namespace. Denotes the path to the subgraph node the checkpoint originates from, separated by `|` character, e.g. `"child|grandchild"`. Defaults to "" (root graph).',
                        "title": "Checkpoint NS",
                        "type": "string",
                    },
                    "thread_id": {
                        "default": "",
                        "title": "Thread ID",
                        "type": "string",
                    },
                },
                "title": "Configurable",
                "type": "object",
            }
        },
        "properties": {
            "configurable": {"$ref": "#/$defs/Configurable", "default": None}
        },
        "title": "LangGraphConfig",
        "type": "object",
    }

    thread1 = {"configurable": {"thread_id": "1"}}
    assert [*graph.stream([0, 1], thread1, checkpoint_during=checkpoint_during)] == [
        {"mapper": "00"},
        {"mapper": "11"},
        {
            "__interrupt__": (
                Interrupt(
                    value="question",
                    resumable=True,
                    ns=[AnyStr("graph:")],
                    when="during",
                ),
            )
        },
    ]
    assert mapper_calls == 2

    assert graph.invoke(
        Command(resume="answer"), thread1, checkpoint_during=checkpoint_during
    ) == [
        "00answer",
        "11answer",
    ]
    assert mapper_calls == 2