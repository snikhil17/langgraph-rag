"""Test with a falsy return from a task."""
def test_falsy_return_from_task(
    request: pytest.FixtureRequest, checkpointer_name: str, snapshot: SnapshotAssertion
):

    checkpointer = request.getfixturevalue(f"checkpointer_{checkpointer_name}")

    @task
    def falsy_task() -> bool:
        return False

    @entrypoint(checkpointer=checkpointer)
    def graph(state: dict) -> dict:
        """React tool."""
        falsy_task().result()
        interrupt("test")

    configurable = {"configurable": {"thread_id": uuid.uuid4()}}
    assert [
        chunk for chunk in graph.stream({"a": 5}, configurable, stream_mode="debug")
    ] == [
        {
            "payload": {
                "config": {
                    "callbacks": None,
                    "configurable": {
                        "checkpoint_id": AnyStr(),
                        "checkpoint_ns": "",
                        "thread_id": AnyStr(),
                    },
                    "metadata": {},
                    "recursion_limit": 25,
                    "tags": [],
                },
                "metadata": {
                    "parents": {},
                    "source": "input",
                    "step": -1,
                    "writes": {
                        "__start__": {
                            "a": 5,
                        },
                    },
                },
                "next": [
                    "graph",
                ],
                "parent_config": None,
                "tasks": [
                    {
                        "id": AnyStr(),
                        "interrupts": (),
                        "name": "graph",
                        "state": None,
                    },
                ],
                "values": None,
            },
            "step": -1,
            "timestamp": AnyStr(),
            "type": "checkpoint",
        },
        {
            "payload": {
                "id": AnyStr(),
                "input": {
                    "a": 5,
                },
                "name": "graph",
                "triggers": ("__start__",),
            },
            "step": 0,
            "timestamp": AnyStr(),
            "type": "task",
        },
        {
            "payload": {
                "id": AnyStr(),
                "input": (
                    (),
                    {},
                ),
                "name": "falsy_task",
                "triggers": ("__pregel_push",),
            },
            "step": 0,
            "timestamp": AnyStr(),
            "type": "task",
        },
        {
            "payload": {
                "error": None,
                "id": AnyStr(),
                "interrupts": [],
                "name": "falsy_task",
                "result": [
                    (
                        "__return__",
                        False,
                    ),
                ],
            },
            "step": 0,
            "timestamp": AnyStr(),
            "type": "task_result",
        },
        {
            "payload": {
                "error": None,
                "id": AnyStr(),
                "interrupts": [
                    {
                        "ns": [
                            AnyStr(),
                        ],
                        "resumable": True,
                        "value": "test",
                        "when": "during",
                    },
                ],
                "name": "graph",
                "result": [],
            },
            "step": 0,
            "timestamp": AnyStr(),
            "type": "task_result",
        },
    ]
    print(type(configurable["configurable"]["thread_id"]))
    assert [
        c
        for c in graph.stream(Command(resume="123"), configurable, stream_mode="debug")
    ] == [
        {
            "payload": {
                "config": {
                    "callbacks": None,
                    "configurable": {
                        "checkpoint_id": AnyStr(),
                        "checkpoint_ns": "",
                        "thread_id": AnyStr(),
                    },
                    "metadata": {},
                    "recursion_limit": 25,
                    "tags": [],
                },
                "metadata": {
                    "parents": {},
                    "source": "input",
                    "step": -1,
                    "thread_id": AnyStr(),
                    "writes": {
                        "__start__": {
                            "a": 5,
                        },
                    },
                },
                "next": [
                    "graph",
                ],
                "parent_config": None,
                "tasks": [
                    {
                        "id": AnyStr(),
                        "interrupts": (
                            {
                                "ns": [
                                    AnyStr(),
                                ],
                                "resumable": True,
                                "value": "test",
                                "when": "during",
                            },
                        ),
                        "name": "graph",
                        "state": None,
                    },
                ],
                "values": None,
            },
            "step": -1,
            "timestamp": AnyStr(),
            "type": "checkpoint",
        },
        {
            "payload": {
                "id": AnyStr(),
                "input": {
                    "a": 5,
                },
                "name": "graph",
                "triggers": ("__start__",),
            },
            "step": 0,
            "timestamp": AnyStr(),
            "type": "task",
        },
        {
            "payload": {
                "id": AnyStr(),
                "input": (
                    (),
                    {},
                ),
                "name": "falsy_task",
                "triggers": ("__pregel_push",),
            },
            "step": 0,
            "timestamp": AnyStr(),
            "type": "task",
        },
        {
            "payload": {
                "error": None,
                "id": AnyStr(),
                "interrupts": [],
                "name": "graph",
                "result": [
                    (
                        "__end__",
                        None,
                    ),
                ],
            },
            "step": 0,
            "timestamp": AnyStr(),
            "type": "task_result",
        },
        {
            "payload": {
                "config": {
                    "callbacks": None,
                    "configurable": {
                        "checkpoint_id": AnyStr(),
                        "checkpoint_ns": "",
                        "thread_id": AnyStr(),
                    },
                    "metadata": {},
                    "recursion_limit": 25,
                    "tags": [],
                },
                "metadata": {
                    "parents": {},
                    "source": "loop",
                    "step": 0,
                    "writes": {
                        "falsy_task": False,
                        "graph": None,
                    },
                },
                "next": [],
                "parent_config": {
                    "callbacks": None,
                    "configurable": {
                        "checkpoint_id": AnyStr(),
                        "checkpoint_ns": "",
                        "thread_id": AnyStr(),
                    },
                    "metadata": {},
                    "recursion_limit": 25,
                    "tags": [],
                },
                "tasks": [],
                "values": None,
            },
            "step": 0,
            "timestamp": AnyStr(),
            "type": "checkpoint",
        },
    ]