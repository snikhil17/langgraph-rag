"""Patch a config with new values.

Args:
    config (Optional[RunnableConfig]): The config to patch.
    callbacks (Optional[BaseCallbackManager], optional): The callbacks to set.
      Defaults to None.
    recursion_limit (Optional[int], optional): The recursion limit to set.
      Defaults to None.
    max_concurrency (Optional[int], optional): The max concurrency to set.
      Defaults to None.
    run_name (Optional[str], optional): The run name to set. Defaults to None.
    configurable (Optional[Dict[str, Any]], optional): The configurable to set.
      Defaults to None.

Returns:
    RunnableConfig: The patched config."""
def patch_config(
    config: Optional[RunnableConfig],
    *,
    callbacks: Callbacks = None,
    recursion_limit: Optional[int] = None,
    max_concurrency: Optional[int] = None,
    run_name: Optional[str] = None,
    configurable: Optional[dict[str, Any]] = None,
) -> RunnableConfig:
    """Patch a config with new values.

    Args:
        config (Optional[RunnableConfig]): The config to patch.
        callbacks (Optional[BaseCallbackManager], optional): The callbacks to set.
          Defaults to None.
        recursion_limit (Optional[int], optional): The recursion limit to set.
          Defaults to None.
        max_concurrency (Optional[int], optional): The max concurrency to set.
          Defaults to None.
        run_name (Optional[str], optional): The run name to set. Defaults to None.
        configurable (Optional[Dict[str, Any]], optional): The configurable to set.
          Defaults to None.

    Returns:
        RunnableConfig: The patched config.
    """
    config = config.copy() if config is not None else {}
    if callbacks is not None:
        # If we're replacing callbacks, we need to unset run_name
        # As that should apply only to the same run as the original callbacks
        config["callbacks"] = callbacks
        if "run_name" in config:
            del config["run_name"]
        if "run_id" in config:
            del config["run_id"]
    if recursion_limit is not None:
        config["recursion_limit"] = recursion_limit
    if max_concurrency is not None:
        config["max_concurrency"] = max_concurrency
    if run_name is not None:
        config["run_name"] = run_name
    if configurable is not None:
        config[CONF] = {**config.get(CONF, {}), **configurable}
    return config